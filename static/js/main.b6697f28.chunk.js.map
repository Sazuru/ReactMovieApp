{"version":3,"sources":["components/MovieTabs.js","components/MovieItem.js","components/Pagination.js","components/App.js","utils/api.js","serviceWorker.js","index.js","img/imgNotFound.png"],"names":["MovieTabs","props","sortBy","updateSortBy","handleClick","value","setClassName","className","onClick","MovieItem","toggleWillWatch","movie","removeMovieFromWillWatch","addMovieToWillWatch","state","willWatch","setState","this","removeMovie","classNameButton","imgFile","backdrop_path","poster_path","image","src","alt","title","vote_average","type","React","Component","Pagination","currentPage","totalPages","changeCurrentPage","renderPageNumbers","Array","from","x","index","map","key","App","getMovies","fetch","then","response","json","data","movies","results","isLoading","total_pages","updateMoviesWillWatch","moviesWillWatch","filter","item","id","updateMovies","prevProps","prevState","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.b6697f28.chunk.js","sourcesContent":["import React from 'react';\n\nconst MovieTabs = props => {\n  const { sortBy, updateSortBy } = props;\n  const handleClick = value => {\n    return () => {\n      updateSortBy(value);\n    };\n  };\n  const setClassName = value => {\n    return `nav-link ${sortBy === value ? 'active' : ''}`;\n  };\n\n  return (\n    <div>\n      <ul className=\"tabs nav nav-pills mb-3\">\n        <li className=\"nav-item\">\n          <div\n            className={setClassName('popularity.desc')}\n            onClick={handleClick('popularity.desc')}\n          >\n            Popularity desc\n          </div>\n        </li>\n        <li className=\"nav-item\">\n          <div\n            className={setClassName('revenue.desc')}\n            onClick={handleClick('revenue.desc')}\n          >\n            Revenue desc\n          </div>\n        </li>\n        <li className=\"nav-item\">\n          <div\n            className={setClassName('vote_average.desc')}\n            onClick={handleClick('vote_average.desc')}\n          >\n            Vote Average desc\n          </div>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default MovieTabs;\n","import React from 'react';\nimport image from '../img/imgNotFound.png';\n\nclass MovieItem extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      willWatch: false,\n    };\n  }\n\n  toggleWillWatch = () => {\n    const { movie, removeMovieFromWillWatch, addMovieToWillWatch } = this.props;\n    this.state.willWatch\n      ? removeMovieFromWillWatch(movie)\n      : addMovieToWillWatch(movie);\n\n    this.setState({\n      willWatch: !this.state.willWatch,\n    });\n  };\n\n  render() {\n    const { movie, removeMovie } = this.props;\n    const classNameButton = `btn ${\n      this.state.willWatch ? 'btn-success' : 'btn-secondary'\n    }`;\n    const buttonText = 'Will Watch';\n    // this.state.willWatch\n    //   ? 'Remove From Will Watch'\n    //   : 'Will Watch';\n    const imgFile =\n      movie.backdrop_path || movie.poster_path\n        ? `https://image.tmdb.org/t/p/w500${movie.backdrop_path ||\n            movie.poster_path}`\n        : image;\n    return (\n      <div className=\"card\">\n        <img className=\"card-img-top\" src={imgFile} alt=\"\" />\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">{movie.title}</h6>\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <p className=\"mb-0\">Rating: {movie.vote_average}</p>\n            <button\n              type=\"button\"\n              className={classNameButton}\n              onClick={() => {\n                this.toggleWillWatch(movie);\n              }}\n            >\n              {buttonText}\n            </button>\n          </div>\n          <button\n            className=\"btn btn-primary\"\n            onClick={() => removeMovie(movie)}\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default MovieItem;\n","import React from 'react';\n\nconst Pagination = props => {\n  const { currentPage, totalPages, changeCurrentPage } = props;\n  const pageNumbers = Array.from(Array(totalPages), (x, index) => index + 1);\n  const renderPageNumbers = pageNumbers.map(value => {\n    const setClassName = `${currentPage === value ? 'active' : ''}`;\n    if (\n      value === 1 ||\n      value === totalPages ||\n      (value >= currentPage - 2 && value <= currentPage + 2)\n    ) {\n      return (\n        <span\n          key={value}\n          className={setClassName}\n          onClick={() => changeCurrentPage(value)}\n        >\n          {value}\n        </span>\n      );\n    }\n  });\n\n  return (\n    <div className=\"pagination mb-3\">\n      <span onClick={() => changeCurrentPage(currentPage - 1)}>&laquo;</span>\n      {renderPageNumbers}\n      <span onClick={() => changeCurrentPage(currentPage + 1)}>&raquo;</span>\n    </div>\n  );\n};\nexport default Pagination;\n","import React from 'react';\n// import { render } from '@testing-library/react';\n// import { moviesData } from '../moviesData';\nimport { API_KEY_3, API_URL } from '../utils/api';\nimport MovieTabs from './MovieTabs';\nimport MovieItem from './MovieItem';\nimport Pagination from './Pagination';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      moviesWillWatch: [],\n      sortBy: 'popularity.desc',\n      currentPage: 1,\n      totalPages: 0,\n      isLoading: false,\n    };\n    //добавить выбор языка\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n    this.getMovies();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    return prevState.sortBy !== this.state.sortBy ||\n      prevState.currentPage !== this.state.currentPage\n      ? this.getMovies()\n      : false;\n  }\n\n  getMovies = () => {\n    fetch(\n      `${API_URL}/discover/movie?api_key=${API_KEY_3}&sort_by=${this.state.sortBy}&page=${this.state.currentPage}`\n    )\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          movies: data.results,\n          isLoading: false,\n          totalPages: data.total_pages,\n        });\n      });\n  };\n\n  updateSortBy = value => {\n    this.setState({\n      sortBy: value,\n      currentPage: 1,\n    });\n  };\n\n  changeCurrentPage = value => {\n    if (value > 0) {\n      this.setState({\n        currentPage: value,\n      });\n    }\n  };\n\n  addMovieToWillWatch = movie => {\n    const updateMoviesWillWatch = [...this.state.moviesWillWatch, movie];\n\n    this.setState({\n      moviesWillWatch: updateMoviesWillWatch,\n    });\n  };\n\n  removeMovieFromWillWatch = movie => {\n    const updateMoviesWillWatch = this.state.moviesWillWatch.filter(function(\n      item\n    ) {\n      return item.id !== movie.id;\n    });\n    this.setState({\n      moviesWillWatch: updateMoviesWillWatch,\n    });\n  };\n\n  removeMovie = movie => {\n    const updateMovies = this.state.movies.filter(function(item) {\n      return item.id !== movie.id;\n    });\n    this.setState({\n      movies: updateMovies,\n    });\n  };\n\n  render() {\n    if (this.state.isLoading) {\n      return <p>Loading ...</p>;\n    }\n    return (\n      <div className=\"container\">\n        <div className=\"row mt-3\">\n          <div className=\"col-9\">\n            <div className=\"row justify-content-center\">\n              <MovieTabs\n                sortBy={this.state.sortBy}\n                updateSortBy={this.updateSortBy}\n              />\n            </div>\n            <div className=\"row\">\n              {this.state.movies.map(movie => {\n                return (\n                  <div className=\"col-6 mb-4\" key={movie.id}>\n                    <MovieItem\n                      movie={movie}\n                      removeMovie={this.removeMovie}\n                      addMovieToWillWatch={this.addMovieToWillWatch}\n                      removeMovieFromWillWatch={this.removeMovieFromWillWatch}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n            <div className=\"row justify-content-center\">\n              <Pagination\n                currentPage={this.state.currentPage}\n                totalPages={this.state.totalPages}\n                changeCurrentPage={this.changeCurrentPage}\n              />\n            </div>\n          </div>\n          <div className=\"col-3\">\n            <h4>Will Watch: {this.state.moviesWillWatch.length} movies</h4>\n            <ul className=\"list-group\">\n              {this.state.moviesWillWatch.map(movie => (\n                <li key={movie.id} className=\"list-group-item\">\n                  <div className=\"d-flex justify-content-between\">\n                    <p>{movie.title}</p>\n                    <p>{movie.vote_average}</p>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const API_KEY_3 = '82af23ba2f3a90480b8e3531270a54e9';\n\nexport const API_KEY_4 =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4MmFmMjNiYTJmM2E5MDQ4MGI4ZTM1MzEyNzBhNTRlOSIsInN1YiI6IjVlNzlmYjgxYTA1NWVmMDAxNjMxYTZhOCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.NiH1TBgopbBsxRp9cK9sVEuzvzRY_7o2Iu3n4-dnvUc';\n\nexport const API_URL = 'https://api.themoviedb.org/3';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/imgNotFound.dd0e6166.png\";"],"sourceRoot":""}